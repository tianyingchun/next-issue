"use strict";var __decorate=this&&this.__decorate||function(t,e,i,r){var o,s=arguments.length,n=s<3?e:null===r?r=Object.getOwnPropertyDescriptor(e,i):r;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)n=Reflect.decorate(t,e,i,r);else for(var c=t.length-1;c>=0;c--)(o=t[c])&&(n=(s<3?o(n):s>3?o(e,i,n):o(e,i))||n);return s>3&&n&&Object.defineProperty(e,i,n),n},__metadata=this&&this.__metadata||function(t,e){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(t,e)};Object.defineProperty(exports,"__esModule",{value:!0}),exports.SupplierStockHistoryService=void 0;const common_1=require("@nestjs/common"),core_1=require("@vendure/core"),supplier_stock_history_entity_1=require("../../entities/supplier-stock-history.entity"),generated_admin_types_1=require("../../generated-admin-types");let SupplierStockHistoryService=class SupplierStockHistoryService{constructor(t,e,i){this.connection=t,this.listQueryBuilder=e,this.administratorService=i}findAll(t,e,i){return this.listQueryBuilder.build(supplier_stock_history_entity_1.SupplierStockHistory,e,{ctx:t,relations:i??["supplierStock","administrator"]}).getManyAndCount().then((([t,e])=>({items:t,totalItems:e})))}findOneByUniqueKey(t,e,i){return this.connection.getRepository(t,supplier_stock_history_entity_1.SupplierStockHistory).findOne({where:{uniqueKey:e},relations:i??["supplierStock","administrator"]})}findOne(t,e,i){return this.connection.getRepository(t,supplier_stock_history_entity_1.SupplierStockHistory).findOne(e,{relations:i??["supplierStock","administrator"]})}async create(t,e){const i=t.activeUserId?await this.administratorService.findOneByUserId(t,t.activeUserId):void 0,r=await this.connection.getRepository(t,supplier_stock_history_entity_1.SupplierStockHistory).save(new supplier_stock_history_entity_1.SupplierStockHistory({...e,administratorId:i?.id}));return this.findOne(t,r.id)}async update(t,e){const i=t.activeUserId?await this.administratorService.findOneByUserId(t,t.activeUserId):void 0,r=await this.connection.getEntityOrThrow(t,supplier_stock_history_entity_1.SupplierStockHistory,e.id);return(0,core_1.patchEntity)(r,{...e,administratorId:i?.id}),await this.connection.getRepository(t,supplier_stock_history_entity_1.SupplierStockHistory).save(r),this.findOne(t,r.id)}async delete(t,e){const i=await this.connection.getEntityOrThrow(t,supplier_stock_history_entity_1.SupplierStockHistory,e);return await this.connection.getRepository(t,supplier_stock_history_entity_1.SupplierStockHistory).remove(i),{result:generated_admin_types_1.DeletionResult.DELETED}}};SupplierStockHistoryService=__decorate([(0,common_1.Injectable)(),__metadata("design:paramtypes",[core_1.TransactionalConnection,core_1.ListQueryBuilder,core_1.AdministratorService])],SupplierStockHistoryService),exports.SupplierStockHistoryService=SupplierStockHistoryService;