"use strict";var __decorate=this&&this.__decorate||function(t,e,r,i){var o,n=arguments.length,a=n<3?e:null===i?i=Object.getOwnPropertyDescriptor(e,r):i;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)a=Reflect.decorate(t,e,r,i);else for(var c=t.length-1;c>=0;c--)(o=t[c])&&(a=(n<3?o(a):n>3?o(e,r,a):o(e,r))||a);return n>3&&a&&Object.defineProperty(e,r,a),a},__metadata=this&&this.__metadata||function(t,e){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(t,e)};Object.defineProperty(exports,"__esModule",{value:!0}),exports.SupplierStockService=void 0;const common_1=require("@nestjs/common"),plugin_common_1=require("@semic/plugin-common"),core_1=require("@vendure/core"),typeorm_1=require("typeorm"),constants_1=require("../../constants"),supplier_stock_entity_1=require("../../entities/supplier-stock.entity"),generated_admin_types_1=require("../../generated-admin-types"),supplier_stock_history_service_1=require("./supplier-stock-history.service");let SupplierStockService=class SupplierStockService{constructor(t,e,r,i,o,n,a){this.connection=t,this.listQueryBuilder=e,this.productVariantService=r,this.supplierStockHistoryService=i,this.orderService=o,this.jobService=n,this.eventBus=a,this.retries=10}findAll(t,e,r){return this.listQueryBuilder.build(supplier_stock_entity_1.SupplierStock,e,{ctx:t,relations:r??["product","productVariant","supplier","stocksInTransits"]}).getManyAndCount().then((([t,e])=>({items:t,totalItems:e})))}async findInsufficientOnSaleStock(t,e,r){const i=await this.connection.getRepository(t,supplier_stock_entity_1.SupplierStock).createQueryBuilder("supplierStock").where("(IFNULL(supplierStock.inTransitsStock, 0) + IFNULL(supplierStock.virtualStock, 0)) <= 0").getMany(),o=i.map((t=>t.productId)),n=i.map((t=>t.productVariantId));return this.findAllGroupByProduct(t,e,o,n,r)}async findOnSaleStockedSkus(t,e,r){let i=this.connection.getRepository(t,supplier_stock_entity_1.SupplierStock).createQueryBuilder("supplierStock").where("(IFNULL(supplierStock.inTransitsStock, 0) + IFNULL(supplierStock.virtualStock, 0)) > 0");const o=[];for(const t of e.tags||[])o.push(`(supplierStock.tags like '%${t}%')`);o.length>0&&(i=i.orWhere(`(${o.join(" OR ")})`));const n=await i.getMany(),a=n.map((t=>t.productId)),c=n.map((t=>t.productVariantId));return this.findAllGroupByProduct(t,e,a,c,r)}async findAllGroupByProduct(t,e,r,i,o){let n=this.connection.getRepository(t,supplier_stock_entity_1.SupplierStock).createQueryBuilder("supplierStock").select("DISTINCT(supplierStock.productId)","productId").take(e.take).skip(e.skip);const a=(0,plugin_common_1.unique)(r);r&&r.length&&(n=n.where("supplierStock.productId IN (:...productIds)",{productIds:a}));const c=await n.getRawMany(),s=(0,plugin_common_1.unique)(c.map((t=>t.productId)));return{items:await this.connection.getRepository(t,supplier_stock_entity_1.SupplierStock).find({relations:o??["product","productVariant","supplier","stocksInTransits"],where:{productId:(0,typeorm_1.In)(s),productVariantId:(0,typeorm_1.In)(i)},order:{inTransitsStock:"ASC",virtualStock:"ASC"}}),totalItems:a.length}}async batchAutoAdjustStock(t,e,r,i){const o=core_1.RequestContext.deserialize(t);for(const[t,n]of Object.entries(i)){let i=(await this.findAllByVariantId(o,t))[0];i||(i=await this.create(o,{productVariantId:String(t),productId:String(n.productId),stockOnHand:0,virtualStock:0,tags:[]}));const a=`${e}_${t}_${r}`;if(!await this.supplierStockHistoryService.findOneByUniqueKey(o,a,[])){const c=await this.executeAdjustStockQuantity(o,i,n.quantity,r);await this.supplierStockHistoryService.create(o,{supplierStockId:c.id,stockAdjustType:r,uniqueKey:a,data:{adjustQuantity:n,newStockOnHandQuantity:c.stockOnHand,newVirtualStockQuantity:c.virtualStock,reason:`系统自动扣减库存, SKU编号: ${t}, 订单编号: ${e}`}})}}}async executeAdjustStockQuantity(t,e,r,i){const o=Number((0,plugin_common_1.price)(e.stockOnHand,{precision:0}).add(r).toString()),n=Number((0,plugin_common_1.price)(e.virtualStock,{precision:0}).add(r).toString()),a={};return i===generated_admin_types_1.SupplierStockAdjustType.STOCK_REAL?a.stockOnHand=o:i===generated_admin_types_1.SupplierStockAdjustType.STOCK_VIRTUAL?a.virtualStock=n:(a.virtualStock=n,a.stockOnHand=o),await this.update(t,{id:e.id,...a})}async adjustStockManually(t,e){let r=await this.findOne(t,e.stockId);if(!r)throw new core_1.EntityNotFoundError("SupplierStock",e.stockId);e.adjustType!==generated_admin_types_1.SupplierStockAdjustType.STOCK_BOTH&&e.adjustType!==generated_admin_types_1.SupplierStockAdjustType.STOCK_REAL&&e.adjustType!==generated_admin_types_1.SupplierStockAdjustType.STOCK_VIRTUAL||(r=await this.executeAdjustStockQuantity(t,r,e.quantity,e.adjustType),await this.supplierStockHistoryService.create(t,{supplierStockId:e.stockId,stockAdjustType:e.adjustType,data:{adjustQuantity:e.quantity,newStockOnHandQuantity:r.stockOnHand,newVirtualStockQuantity:r.virtualStock,reason:e.reason||"后台人工调整"}}))}async findOrderVariantIds(t,e){const r=e;if(r&&Object.keys(r).length>0){const{orderCode:e,orderPlacedEndAt:i,orderPlacedStartAt:o,orderState:n}=r,a={};if(o&&i&&(a.updatedAt={between:{start:o,end:i}}),n&&(a.state={eq:n}),e&&(a.code={eq:e}),!Object.keys(r).length)return null;const{items:c}=await this.orderService.findAll(t,{filter:a,take:1e5,sort:{updatedAt:generated_admin_types_1.SortOrder.DESC}}),s=c.reduce(((t,e)=>{const r=e.lines.map((t=>t.productVariant));return t.concat(r)}),[]);return(0,plugin_common_1.unique)(s,"id")}return null}findOne(t,e,r){return this.connection.getRepository(t,supplier_stock_entity_1.SupplierStock).findOne(e,{relations:r??["product","productVariant","supplier","stocksInTransits"]})}async findAllSupplierStockTags(t){return(await this.connection.getRepository(t,supplier_stock_entity_1.SupplierStock).createQueryBuilder("stock").select("stock.tags").getMany()).reduce(((t,e)=>t.concat(...e.tags||[])),[])}findAllByVariantId(t,e,r){return this.connection.getRepository(t,supplier_stock_entity_1.SupplierStock).find({where:{productVariantId:e,enabled:!0},order:{createdAt:"DESC"},relations:r})}async create(t,e){const r=new supplier_stock_entity_1.SupplierStock(e);if(r.productVariantId){const e=await this.productVariantService.findOne(t,r.productVariantId);if(!e)throw new core_1.UserInputError("error.no-product-variant-found-for-update-supplier-stock");r.productVariantId=String(e.id),r.productId=String(e.productId)}const i=await this.connection.getRepository(t,supplier_stock_entity_1.SupplierStock).save(r);return(0,core_1.assertFound)(this.findOne(t,i.id))}async update(t,e){const r=await this.connection.getEntityOrThrow(t,supplier_stock_entity_1.SupplierStock,e.id),i={...e};if(i.productVariantId){const e=await this.productVariantService.findOne(t,i.productVariantId);if(!e)throw new core_1.UserInputError("error.no-product-variant-found-for-update-supplier-stock");i.productVariantId=String(e.id),i.productId=String(e.productId)}return(0,core_1.patchEntity)(r,i),await this.connection.getRepository(t,supplier_stock_entity_1.SupplierStock).save(r),(0,core_1.assertFound)(this.findOne(t,r.id))}async syncProductVariantsStock(t,e){let r=[];e&&e.length?(r=await this.productVariantService.findByIds(t,e),core_1.Logger.debug(`syncProductVariantsStock,variants:${e.join(",")}; items: ${r.length}`,constants_1.LOGGER_CTX),await this.batchCreateDefaultProductVariantStock(t,r)):await this.syncAllProductVariantsToStock(t,0)}async syncAllProductVariantsToStock(t,e,r=100){const{items:i}=await this.productVariantService.findAll(t,{take:r,skip:e*r,filter:{enabled:{eq:!0}}});core_1.Logger.debug(`batchCreateDefaultProductVariantStock, items: ${i.length}, take: ${r}`,constants_1.LOGGER_CTX),await this.batchCreateDefaultProductVariantStock(t,i),i.length>=r&&await this.syncAllProductVariantsToStock(t,e+1,r)}async batchCreateDefaultProductVariantStock(t,e){for(const r of e){const e=await this.findAllByVariantId(t,r.id);if(e.length)for(const i of e)await this.update(t,{id:i.id,productId:String(r.productId)});else await this.create(t,{productVariantId:String(r.id),productId:String(r.productId),stockOnHand:0,virtualStock:0,tags:[]})}}async delete(t,e){const r=await this.connection.getEntityOrThrow(t,supplier_stock_entity_1.SupplierStock,e);return await this.connection.getRepository(t,supplier_stock_entity_1.SupplierStock).remove(r),{result:generated_admin_types_1.DeletionResult.DELETED}}async onModuleInit(){this.jobQueue=await this.jobService.createQueue({name:"auto-adjust-supplier-stock",process:t=>this.batchAutoAdjustStock(t.data.ctx,t.data.orderId,t.data.stockAdjustType,t.data.adjustVariantQuantity).catch((e=>{throw t.attempts>=this.retries&&core_1.Logger.error(`Failed to adjust supplier stock for ${JSON.stringify(t.data.adjustVariantQuantity)}. This was the final attempt.`,constants_1.LOGGER_CTX,e),core_1.Logger.warn(`Failed to adjust supplier stock for ${JSON.stringify(t.data.adjustVariantQuantity)}: ${e?.message}`,constants_1.LOGGER_CTX),e}))})}onApplicationBootstrap(){this.eventBus.ofType(core_1.OrderStateTransitionEvent).subscribe((({ctx:t,toState:e,order:r})=>{if("PaymentSettled"===e||"Shipped"===e||"PartiallyShipped"===e){if(!this.jobQueue)return core_1.Logger.error("Create supplier stock jobQueue not initialized",constants_1.LOGGER_CTX);const i="PaymentSettled"===e?generated_admin_types_1.SupplierStockAdjustType.STOCK_VIRTUAL:generated_admin_types_1.SupplierStockAdjustType.STOCK_REAL;i===generated_admin_types_1.SupplierStockAdjustType.STOCK_VIRTUAL?this.createAdjustVirtualStockJobTask(t,r).catch((t=>{core_1.Logger.error(`create an supplier virtual stock job task err ${t}`,constants_1.LOGGER_CTX)})):i===generated_admin_types_1.SupplierStockAdjustType.STOCK_REAL&&this.createAdjustRealStockJobTask(t,r).catch((t=>{core_1.Logger.error(`create an supplier real stock job task err ${t}`,constants_1.LOGGER_CTX)}))}}))}async createAdjustVirtualStockJobTask(t,e){const r={},i=e.lines||[];for(const t of i){const e=t.productVariant,i=e.id,o=e.productId,n=r[i];r[i]=n?{quantity:Number((0,plugin_common_1.price)(n.quantity).subtract(t.quantity).toString()),productId:o}:{quantity:-t.quantity,productId:o}}return await this.jobQueue.add({ctx:t.serialize(),orderId:e.id,stockAdjustType:generated_admin_types_1.SupplierStockAdjustType.STOCK_VIRTUAL,adjustVariantQuantity:r},{retries:this.retries}),core_1.Logger.info(`Added create adjust supplier virtual stock job to queue for order ${JSON.stringify(r)}`,constants_1.LOGGER_CTX)}async createAdjustRealStockJobTask(t,e){const r={},i=e.lines||[];for(const t of i){const e=t.productVariant,i=e.id,o=e.productId;for(const e of t.items)if(e.fulfillment){const t=r[i];r[i]=t?{quantity:Number((0,plugin_common_1.price)(t.quantity).subtract(1).toString()),productId:o}:{quantity:-1,productId:o}}}return await this.jobQueue.add({ctx:t.serialize(),orderId:e.id,stockAdjustType:generated_admin_types_1.SupplierStockAdjustType.STOCK_REAL,adjustVariantQuantity:r},{retries:this.retries}),core_1.Logger.info(`Added create adjust supplier real stock job to queue for order ${JSON.stringify(r)}`,constants_1.LOGGER_CTX)}};SupplierStockService=__decorate([(0,common_1.Injectable)(),__metadata("design:paramtypes",[core_1.TransactionalConnection,core_1.ListQueryBuilder,core_1.ProductVariantService,supplier_stock_history_service_1.SupplierStockHistoryService,core_1.OrderService,core_1.JobQueueService,core_1.EventBus])],SupplierStockService),exports.SupplierStockService=SupplierStockService;