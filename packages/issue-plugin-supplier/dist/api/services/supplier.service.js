"use strict";var __decorate=this&&this.__decorate||function(e,t,i,r){var n,o=arguments.length,p=o<3?t:null===r?r=Object.getOwnPropertyDescriptor(t,i):r;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)p=Reflect.decorate(e,t,i,r);else for(var c=e.length-1;c>=0;c--)(n=e[c])&&(p=(o<3?n(p):o>3?n(t,i,p):n(t,i))||p);return o>3&&p&&Object.defineProperty(t,i,p),p},__metadata=this&&this.__metadata||function(e,t){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(e,t)};Object.defineProperty(exports,"__esModule",{value:!0}),exports.SupplierService=void 0;const common_1=require("@nestjs/common"),core_1=require("@vendure/core"),supplier_entity_1=require("../../entities/supplier.entity"),generated_admin_types_1=require("../../generated-admin-types");let SupplierService=class SupplierService{constructor(e,t){this.connection=e,this.listQueryBuilder=t}findAll(e,t){return this.listQueryBuilder.build(supplier_entity_1.Supplier,t,{ctx:e,relations:[]}).getManyAndCount().then((([e,t])=>({items:e,totalItems:t})))}findOne(e,t){return this.connection.getRepository(e,supplier_entity_1.Supplier).findOne(t,{relations:[]})}async create(e,t){const i=await this.connection.getRepository(e,supplier_entity_1.Supplier).save(new supplier_entity_1.Supplier(t));return this.findOne(e,i.id)}async update(e,t){const i=await this.connection.getEntityOrThrow(e,supplier_entity_1.Supplier,t.id);return(0,core_1.patchEntity)(i,t),await this.connection.getRepository(e,supplier_entity_1.Supplier).save(i),this.findOne(e,i.id)}async delete(e,t){const i=await this.connection.getEntityOrThrow(e,supplier_entity_1.Supplier,t);return await this.connection.getRepository(e,supplier_entity_1.Supplier).remove(i),{result:generated_admin_types_1.DeletionResult.DELETED}}};SupplierService=__decorate([(0,common_1.Injectable)(),__metadata("design:paramtypes",[core_1.TransactionalConnection,core_1.ListQueryBuilder])],SupplierService),exports.SupplierService=SupplierService;